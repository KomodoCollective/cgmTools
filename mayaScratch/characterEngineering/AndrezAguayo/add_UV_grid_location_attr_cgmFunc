def add_UV_grid_location_cgmFunc(*args,**kws):
    class fncWrap(cgmGeneral.cgmFuncCls):
        ''' Sometimes there is a need to know what grid space your UVs are in.
        UVs are not always going to be in the 0-1 grid space and are placed 
        in another grid space. This function checks where they are and adds 
        and attrabut with that data.''' 
    
        def __init__(self,*args,**kws):
            super(fncWrap,self).__init__(*args,**kws)
            self._str_funcName = 'add_UV_grid_location_attr'
            self._b_reportTimes = 1
            self._b_autoProgressBar = True
            self._l_ARGS_KWS_DEFAULTS = [{'kw':'metaObject'}]
            self.__dataBind__(*args,**kws)
            self.l_funcSteps = [{'step':'Validating','call':self._validate_},
                                {'step':'Do IT','call':self.add_UV_grid_atter}]
        def _validate_(self):
            self.metaObject = self.d_kws['metaObject']
       

            
        #def _setup_(self):pass
        def add_UV_grid_atter(self):
            ## check if it a mes type
            meta_shape = self.metaObject.getShapes()
            mc.objectType(meta_shape) == 'mesh'
            
            ## get the UVs  
            UV_locations = mc.polyEditUV(self.metaObject.mNode +".map[:]",
                                          q=True,u=True,v=False)
         
            ## make a set for U and one for V
            U_gridSpaces = []
            V_gridSpaces = []
            for i in range(len(UV_locations)):
                if i%2 == 0:
                    #Check U'''
                    GridSpace = int(UV_locations[i])
                    if GridSpace not in U_gridSpaces:
                        U_gridSpaces.append(GridSpace)
                else:
                    GridSpace = int(UV_locations[i])
                    if GridSpace not in V_gridSpaces:
                        V_gridSpaces.append(GridSpace)
                
            ## add atter to metaObject
            self.metaObject.addAttr("U_gridSpace",U_gridSpaces)
            self.metaObject.addAttr("V_gridSpace",V_gridSpaces)
    
    return fncWrap(*args,**kws).go()

### example test 
#testCube = mc.polyCube(n='TestCube')[0]### make poly object
#meta_testCube = cgmMeta.cgmObject(testCube)### mata it 
#add_UV_grid_location_cgmFunc(meta_testCube)### add 2 new attrs that tell you what UV grids they are in

### move UVS around to and rund again to see what happens
#mc.polyEditUV(meta_testCube.mNode+".map[:]",u=10,v=7)
#add_UV_grid_location_cgmFunc(meta_testCube)